`timescale 1ns / 100ps

/*
    Auto Generated by Tizzy 3.0 created by D.A.W. Markus
    ===================================
    Output File:    pump_tb
    FSM author:     Patrick
    Generated on:   13-Mar-2020

*/

module pump_fsm_tb ();
    /* define input regs */
    reg  [0:0] clk;
    reg  [0:0] reset;
    reg  [0:0] update;
	reg  [1:0] command;

    /* define output wires */
	wire [0:0] pump;
	wire [0:0] led;

    /* Define state paramaters */
    localparam
	off     = 0,
	standby = 1,
	working = 2;

            
    /* Instantiate the Design Under Test (DUT) */
    pump_fsm pump_inst(
        .clk(clk),
        .reset(reset),
        .update(update),
		.command(command),
		.pump(pump),
		.led(led)            
    );
    
    always #50 clk = !clk;
    
    always @(pump,led) begin
        #1
        if(clk == 0) begin
            $display("FAIL: Reg transfer on negedge detected by outputwires DUT");
            $finish;
        end
    end

    initial begin
   	     $dumpfile("dut.vcd");
   	     $dumpvars(0,pump_inst);
        
        
        clk    = 1'b1;
        reset  = 1'b0;
        update = 1'b0;

		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		
		if(pump === 1'bx)
		begin
			$display("FAIL: Reset is not resetting outputs to value");
			$finish;
		end
		
		if(led === 1'bx)
		begin
			$display("FAIL: Reset is not resetting outputs to value");
			$finish;
		end
		
		$display("PASS @%g: passed reset test\n", $time);
		
		// Testing state: off
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b00;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			test_output(1'b0,1'b0);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		//Transition to: standby
		fork
			test_output(1'b0,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b10;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			test_output(1'b0,1'b0);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			test_output(1'b0,1'b0);
			@(negedge clk) update = 1'b0;
		join
		
		// Testing state: standby
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b00;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			test_output(1'b0,1'b0);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		//Transition to: standby
		fork
			test_output(1'b0,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b10;
		@(negedge clk) update = 1'b1;
		//Transition to: standby
		fork
			test_output(1'b0,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		//Transition to: working
		fork
			test_output(1'b1,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		// Testing state: working
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b00;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			test_output(1'b0,1'b0);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		//Transition to: working
		fork
			test_output(1'b1,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b10;
		@(negedge clk) update = 1'b1;
		//Transition to: standby
		fork
			test_output(1'b0,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		@(negedge clk) update = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		//Transition to: working
		fork
			test_output(1'b1,1'b1);
			@(negedge clk) update = 1'b0;
		join
		
		$display("Starting tests level triggering on inputport update\n");
		
		// Testing state: off
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b00;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			begin
				@(negedge clk)
				@(negedge clk)
				@(negedge clk) update = 1'b0;
				test_output(1'b0,1'b0);
			end
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b01;
		@(negedge clk) update = 1'b1;
		//Transition to: standby
		fork
			begin
				@(negedge clk)
				@(negedge clk)
				@(negedge clk) update = 1'b0;
				test_output(1'b0,1'b1);
			end
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b10;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			begin
				@(negedge clk)
				@(negedge clk)
				@(negedge clk) update = 1'b0;
				test_output(1'b0,1'b0);
			end
		join
		
		#500
		@(negedge clk) reset = 1'b1;
		@(negedge clk) reset = 1'b0;
		@(negedge clk)
		command = 2'b11;
		@(negedge clk) update = 1'b1;
		//Transition to: off
		fork
			begin
				@(negedge clk)
				@(negedge clk)
				@(negedge clk) update = 1'b0;
				test_output(1'b0,1'b0);
			end
		join
		
                
        
        #100
        $display("PASS @%g: Completed simulation", $time);
        $finish;
        
    end
    
    
    task test_output;
		input [0:0] pump_ref;
		input [0:0] led_ref;

        fork: k
            begin
                // detection of timeout on transition    
                #10000
                $display("FAIL @%g: timeout\n", $time);
                $display("Input Stats: \n");
                $display("command:\t%b\n",command);
                $display("FSM Stats: \n");
                $display("pump:\t%b\nled:\t%b\n",pump,led);
                $display("Expected Stats: \n");
                $display("pump_ref:\t%b\nled_ref:\t%b\n",pump_ref,led_ref);
                $finish;
            end
            begin
                // detection of wrong transition
                @(pump,led)
                #25
                $display("FAIL @%g: wrong transition\n", $time);
                $display("Input Stats: \n");
                $display("command:\t%b\n",command);
                $display("FSM Stats: \n");
                $display("pump:\t%b\nled:\t%b\n",pump,led);
                $display("Expected Stats: \n");
                $display("pump_ref:\t%b\nled_ref:\t%b\n",pump_ref,led_ref);
                $finish;
                
            end
            begin
                // detection of correct transition
                @(posedge clk)
                wait((pump == pump_ref) && (led == led_ref))
                #1
                $display("PASS @%g: passed transition test\n", $time);
                disable k;
            end
        join
    endtask    
endmodule
